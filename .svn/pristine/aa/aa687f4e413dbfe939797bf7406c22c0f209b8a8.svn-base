import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { environment } from 'src/environments/environment';
import { TaskSomeone } from 'src/app/_models/TaskSomeone';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AlertifyService } from 'src/app/_services/alertify.service';
import { TaskSomeoneService } from 'src/app/_services/task-someone.service';
import { Media } from 'src/app/_models/Media';
import { MediaUploadComponent } from 'src/app/media/media-upload/media-upload.component';

@Component({
  selector: 'app-edit-task',
  templateUrl: './edit-task.component.html',
  styleUrls: ['./edit-task.component.css']
})
export class EditTaskComponent implements OnInit {
  @Input() task: TaskSomeone;

  @Output() saveSuccessfully = new EventEmitter<any>();
  @Output() cancelChanges = new EventEmitter();

  @ViewChild(MediaUploadComponent) mediaUploadComponent: MediaUploadComponent;

  baseUrl = environment.apiUrl;
  authToken = 'Bearer ' + localStorage.getItem('token');

  editTaskForm: FormGroup;
  attachments: Array<Media> = [];
  toBeDeletedMediaIds: Array<number>;
  uploaderUrl: string;

  constructor(private alertify: AlertifyService, private fb: FormBuilder, private taskSomeoneServive: TaskSomeoneService) { }

  ngOnInit() {
    this.createEditTaskForm();
    this.attachments = this.task.mediaList.slice();
    this.toBeDeletedMediaIds = Array<number>();
    this.uploaderUrl = this.baseUrl + 'logged/tasksomeone/addMedia/' + this.task.id;
  }

  createEditTaskForm() {
    this.editTaskForm = this.fb.group({
      id: [''],
      title: ['', Validators.required],
      description: ['', [Validators.required, Validators.minLength(1), Validators.maxLength(300)]],
      location: ['', Validators.required],
      user: [''],
      createdOn: ['']
    });
    // placing the value on the form
    this.editTaskForm.patchValue(this.task);

  }

  onSaveChanges() {
    if (this.editTaskForm.valid) {
      this.taskSomeoneServive.updateTaskSomeone(this.editTaskForm.value).subscribe((data: any) => {

        // if there is any file to be deleted
        if (this.toBeDeletedMediaIds.length > 0){

        }

        // if we have files to upload, we will fire the saveSuccessfully event emitter when we get an
        // answer from the updateFile process
        if (this.mediaUploadComponent.uploader.queue.length > 0) {
          this.mediaUploadComponent.uploadAllMedia();
        } else {
          this.saveSuccessfullyEvent(data);
        }
      }, error => {
        this.alertify.error(error.subErrors[0].message);
      }
      );
    }
  }

  onCancelChanges() {
    this.cancelChanges.emit();
  }

  removeMediaFromTaskMedia(media) {
    this.toBeDeletedMediaIds.push(media.id);
    this.attachments.splice(this.attachments.indexOf(media), 1);
  }

  saveSuccessfullyEvent(data: any) {
    this.alertify.success('Task successfully changed');
    this.saveSuccessfully.emit(data);
  }
}
